#
# Mensajes de la interface VentanaInspector
#
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_PATENTE=patente
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_CALLE=calle
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_ALTURA=altura
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_FECHA_ENTRADA=fecha entrada
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_HORA_ENTRADA=hora entrada
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_ESTADO=estado
VentanaInspector.TABLA_GENERAR_MULTA_PATENTE=patente
VentanaInspector.TABLA_GENERAR_MULTA_CALLE=calle
VentanaInspector.TABLA_GENERAR_MULTA_ALTURA=altura
VentanaInspector.TABLA_GENERAR_MULTA_NRO_MULTA=nro multa
VentanaInspector.TABLA_GENERAR_MULTA_FECHA_MULTA=fecha multa
VentanaInspector.TABLA_GENERAR_MULTA_HORA_MULTA=hora multa
VentanaInspector.TABLA_GENERAR_MULTA_LEGAJO=legajo
#
# Mensajes de la clase VentanaInspectorImpl
#
VentanaInspectorImpl.eliminarVentana.logger=Eliminación de la ventana.
VentanaInspectorImpl.informar.logger=Crea una ventana modal informando {}
VentanaInspectorImpl.mostrarInspectorLogueado.logger=Se registra al inspector {}, {} con legajo {}
VentanaInspectorImpl.mostrarInspectorLogueado.lblInspector=Legajo: 
VentanaInspectorImpl.mostrarParquimetroConectado.logger=La ventana muestra la información del parquimetro conectado.
VentanaInspectorImpl.mostrarParquimetroConectado.lblParquimetroUbicacion1=Conectado al parquímetro
VentanaInspectorImpl.mostrarParquimetroConectado.lblParquimetroUbicacion2=de la calle
VentanaInspectorImpl.poblarParquimetros.logger=Carga los combos de parquimetros con los {} recuperados
VentanaInspectorImpl.poblarUbicaciones.logger=Carga los combos de ciudades con las {} ubicaciones recuperados
VentanaInspectorImpl.inicializar.logger=Inicializacion de la ventana del Inspector
VentanaInspectorImpl.inicializar.frameTitle=Unidad Personal para agentes Inspectores
VentanaInspectorImpl.crearMenuOpciones.menuOpciones=Menu
VentanaInspectorImpl.crearMenuOpciones.mntmCerrarSesion=Cerrar Sesion
VentanaInspectorImpl.crearMenuOpciones.mntmSalir=Salir
VentanaInspectorImpl.crearPanelBotoneraVolverMenuPrincipal.btnVolverMenuOpciones=Volver
VentanaInspectorImpl.actualizarListaPatentesEstacionadas.logger=Se solicita a la ventana mostrar la información de {} patentes.
VentanaInspectorImpl.actualizarListaMultas.logger=Se solicita a la ventana mostrar la información de {} multas.
VentanaInspectorImpl.crearPanelSeleccionaUbicacion.logger=Se crea el panel de selección de ubicación.
VentanaInspectorImpl.crearPanelSeleccionaUbicacion.lblUbicacion=Ubicación
VentanaInspectorImpl.crearPanelSeleccionaUbicacion.lblParquimetro=Parquímetro
VentanaInspectorImpl.crearPanelSeleccionaUbicacion.btnConectarParquimetro=Conectarse al Parquímetro
VentanaInspectorImpl.crearPanelCargaPatentes.lblTitulo=Carga de Patentes Estacionadas
VentanaInspectorImpl.crearPanelCargaPatentes.lblPatente=Patente:
VentanaInspectorImpl.crearPanelCargaPatentes.btnAgregarPatente=Agregar Patente
VentanaInspectorImpl.crearPanelCargaPatentes.btnQuitarPatente=Quitar Patente
VentanaInspectorImpl.crearPanelCargaPatentes.btnLimpiarLista=Limpiar Lista
VentanaInspectorImpl.crearPanelCargaPatentes.btnRegistrarMultas=Registrar Multas
VentanaInspectorImpl.crearPanelCargaPatentes.lblListaPatentes=Patentes Cargadas
VentanaInspectorImpl.crearPanelCargaPatentes.lblListaMultas=Patentes Multadas
VentanaInspectorImpl.poblarTablaPatentesEstacionadas.logger=Carga la tabla de estado de cada patente en la ubicación proporcionada.
VentanaInspectorImpl.poblarTablaMultaGenerarMultas.logger=Carga la tabla de multas con cada patente proporcionada.
VentanaInspectorImpl.registrarEventos.logger=Se registran los listeners.
VentanaInspectorImpl.registrarEventos.cmbUbicacion.listener=Cambia la ubicación a {}.
VentanaInspectorImpl.registrarEventos.getBtnConectarParquimetro.listener=Ejecuta el listener de conexión a parquimetro.
VentanaInspectorImpl.registrarEventos.getBtnAgregarPatente.listener=Ejecuta el listener de agregar patente al listado.
VentanaInspectorImpl.registrarEventos.getBtnAgregarPatente.informar=La patente no tiene el formato requerido. Se esperan 3 mayúsculas y 3 dígitos.
VentanaInspectorImpl.registrarEventos.getBtnQuitarPatente.listener=Ejecuta el listener de quitar patente del listado.
VentanaInspectorImpl.registrarEventos.getBtnQuitarPatente.informar=Debe seleccionar primero las patentes a quitar.
VentanaInspectorImpl.registrarEventos.getBtnLimpiarLista.listener=Ejecuta el listener de limpiar listado de patentes estacionadas
VentanaInspectorImpl.registrarEventos.getBtnRegistrarMultas.listener=Ejecuta el listener de registrar multas.
VentanaInspectorImpl.registrarEventos.getBtnRegistrarMultas.informar=Debe cargar primero las patentes estacionadas.
#
# Mensajes de la clase ControladorInspectorImpl
#
ControladorInspectorImpl.constructor.logger=Se crea el controlador del Inspector
ControladorInspectorImpl.salirAplicacion.logger=Saliendo de la aplicación.
ControladorInspectorImpl.cerrarSesion.logger=Cerrando la sesión.
ControladorInspectorImpl.cerrarSesion.loggerLogin=Creando la ventana de login.
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.logger=Recupera del modelo las ubicaciones.
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.loggerPoblarUbicaciones=informar a la ventana las ubicaciones recuperadas.
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.loggerMostrarPanelPrincipal=Muestra el panel de carga de patentes en ubicación.
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.loggerWarn=Se produjo una excepción {}
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.informar=Hubo un problema para recuperar los destinos.
ControladorInspectorImpl.registrarInspectorLogueado.logger=Se registra el login del inspector con legajo {}.
ControladorInspectorImpl.cambiarUbicacion.logger=Se cambió la ubicación y se deben recuperar los parquimetros.
ControladorInspectorImpl.cambiarUbicacion.logger2=Busca los parquimetros de la ubicación.
ControladorInspectorImpl.cambiarUbicacion.loggerRecuperarParquimetros=Se recuperaron {} parquimetros.
ControladorInspectorImpl.cambiarUbicacion.warn=Se produjo una excepción {}
ControladorInspectorImpl.agregarPatente.logger=Intenta agregar la Patente {} al listado.
ControladorInspectorImpl.agregarPatente.patenteNoExiste=La patente no se encuentra registrada.
ControladorInspectorImpl.agregarPatente.errorConexion=Hubo un error en la conexión con la base de datos.
ControladorInspectorImpl.agregarPatente.logger.patenteRepetida=Verifica si la patente ya fue registrada.
ControladorInspectorImpl.agregarPatente.patenteRepetida=La patente ya se encuentra ingresada.
ControladorInspectorImpl.mostrarVentanaCargaPatentes.logger=Muestra el panel de carga de patentes en ubicación.
ControladorInspectorImpl.conectarParquimetro.logger=Se intenta conectar al parquimetro {}.
ControladorInspectorImpl.conectarParquimetro.logger.conectarParquimetro=Se conectó al parquimetro y se registró su acceso.
ControladorInspectorImpl.conectarParquimetro.logger.actualizaUbicacion=Actualiza la información de la ubicación a la cual esta asociado el parquimetro según los datos de la BD.
ControladorInspectorImpl.conectarParquimetro.logger.muestraParquimetro=Muestra el parquimetro al cual se conectó.
ControladorInspectorImpl.conectarParquimetro.logger.conexionParquimetroException=No se pudo conectar al parquimetro.
ControladorInspectorImpl.conectarParquimetro.logger.Exception=Se produjo una excepción no controlada: {}
ControladorInspectorImpl.conectarParquimetro.logger.limpiaListaPatentes=Se inicializa la lista de patentes en la ubicación.
ControladorInspectorImpl.registraMultas.exception=Se produjo una excepción al procesar la patente {}
ControladorInspectorImpl.registraMultas.logger=Ingresa a registrar multas para la ubicación {}.
ControladorInspectorImpl.registraMultas.inspectorNoHabilitado=El inspector no se encuentra habilitado para registrar multas en dicha ubicación.
ControladorInspectorImpl.registraMultas.errorConexion=Hubo un error en la conexión con la base de datos.
ControladorInspectorImpl.registraMultas.logger.multas=Se labraron {} multas.
#
# Mensajes de la clase ModeloInspectorImpl
#
ModeloInspectorImpl.constructor.logger=Se crea el modelo Inspector.
ModeloInspectorImpl.autenticar.logger=Intenta autenticar al inspector con legajo {} y password {}.
ModeloInspectorImpl.autenticar.parametrosVacios=Los parametros no pueden ser vacios.
ModeloInspectorImpl.recuperarUbicaciones.logger=Recupera todas las ubicaciones.
ModeloInspectorImpl.recuperarParquimetros.logger=Recupera los parquimetros de la ubicación {}.
ModeloInspectorImpl.conectarParquimetro.logger=Se intenta conectar al parquimetro {}.
ModeloInspectorImpl.recuperarUbicacion.logger=Recupera la ubicación del parquimetro con ID {}.
ModeloInspectorImpl.recuperarUbicacion.ubicacionNoEncontrada=No se encontró la ubicación del parquimetro con ID {}.
ModeloInspectorImpl.verificarPatente.logger=Verifica que la patente {} se encuentra en la tabla de Automoviles.
ModeloInspectorImpl.recuperarEstacionamiento.logger=Verifica si existe un estacionamiento registrado para la patente {} en {} {}.
ModeloInspectorImpl.generarMultas.logger=Se generarán multas a las patentes con estacionamiento no registrado. Potenciales: {}.
#
# Mensajes de la clase DAOAutomovilImpl
#
DAOAutomovilImpl.recuperarAutomovilPorPatente.AutomovilNoEncontradoException=El automovil no se encuentra registrado en el sistema.
#
# Mensajes de la clase DAOInspectorImpl
#
DAOInspectorImpl.autenticar.inspectorNoAutenticado=No se autentico al inspector {} con legajo {}.
DAOInspectorImpl.autenticar.errorConexion=Hubo un error en la conexión.
DAOInspectorImpl.recuperarInspectorPorLegajo.InspectorNoEncontradoException=El inspector no se encuentra registrado en el sistema.
#
# Mensajes de la clase VentanaParquimetroImpl
#
VentanaParquimetroImpl.eliminarVentana.logger=Eliminación de la ventana.
VentanaParquimetroImpl.informar.logger=Crea una ventana modal informando {}
VentanaParquimetroImpl.poblarTarjetas.logger=Carga el combo con las {} tarjetas recuperadas.
VentanaParquimetroImpl.poblarParquimetros.logger=Carga el combo con los {} parquimetros recuperados.
VentanaParquimetroImpl.poblarUbicaciones.logger=Carga el combo con las {} ubicaciones recuperadas.
VentanaParquimetroImpl.mostrarInformacionTarjeta.logger=Se muestra la información de la tarjeta {}.
VentanaParquimetroImpl.mostrarIngresoEstacionamiento.logger=Se muestra la información del ingreso al estacionamiento.
VentanaParquimetroImpl.mostrarSalidaEstacionamiento.logger=Se muestra la información de la salida del estacionamiento.
VentanaParquimetroImpl.inicializar.logger=Inicializacion de la ventana del Parquimetro
VentanaParquimetroImpl.inicializar.frameTitle=Ingreso y Salida de Estacionamiento
VentanaParquimetroImpl.crearMenuOpciones.menuOpciones=Menu
VentanaParquimetroImpl.crearMenuOpciones.mntmCerrarSesion=Cerrar Sesion
VentanaParquimetroImpl.crearMenuOpciones.mntmSalir=Salir
VentanaParquimetroImpl.crearPanelConectarParquimetro.logger=Se crea el panel de conexión al parquimetro.
VentanaParquimetroImpl.crearPanelSeleccionaUbicacion.lblTarjeta=Tarjeta
VentanaParquimetroImpl.crearPanelConectarParquimetro.lblUbicacion=Ubicación
VentanaParquimetroImpl.crearPanelConectarParquimetro.lblParquimetro=Parquímetro
VentanaParquimetroImpl.crearPanelConectarParquimetro.btnConectarParquimetro=Conectarse al Parquímetro
VentanaParquimetroImpl.registrarEventos.logger=Se registran los listeners.
VentanaParquimetroImpl.registrarEventos.cmbUbicacion.listener=Cambia la ubicación a {}.
VentanaParquimetroImpl.registrarEventos.getBtnConectarParquimetro.listener=Ejecuta el listener de conexión a parquimetro.
VentanaParquimetroImpl.setTextLblTarjetaInformacion.null=No ha seleccionado una tarjeta.
VentanaParquimetroImpl.setTextLblTarjetaInformacion.saldo=Saldo: 
VentanaParquimetroImpl.setTextLblTarjetaInformacion.tipoTarjeta=Tipo de Tarjeta: 
VentanaParquimetroImpl.setTextLblTarjetaInformacion.tipoTarjeta.descuento=Descuento: 
VentanaParquimetroImpl.setTextLblTarjetaInformacion.automovil.patente=Patente: 
VentanaParquimetroImpl.setTextLblTarjetaInformacion.automovil.marca=Marca: 
VentanaParquimetroImpl.setTextLblTarjetaInformacion.automovil.modelo=Modelo: 
VentanaParquimetroImpl.setTextLblTarjetaInformacion.automovil.color=Color: 
VentanaParquimetroImpl.setTextLblTarjetaInformacion.conductor.apellidoYnombre=Conductor: 
VentanaParquimetroImpl.setTextLblConexionResultadoEntrada.ingreso=Ha realizado un INGRESO al estacionamiento
VentanaParquimetroImpl.setTextLblConexionResultadoEntrada.tiempoDisponible=Dispone de %s minutos
VentanaParquimetroImpl.setTextLblConexionResultadoEntrada.fechaIngreso=Fecha de Ingreso:
VentanaParquimetroImpl.setTextLblConexionResultadoEntrada.horaIngreso=Hora de Ingreso:
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.salida=Ha realizado una SALIDA del estacionamiento
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.tiempoTranscurrido=Ha estado en el estacionamiento %s minutos
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.saldo=El saldo de su tarjeta es $
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.fechaIngreso=Fecha de Ingreso:
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.horaIngreso=Hora de Ingreso:
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.fechaSalida=Fecha de Salida:
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.horaSalida=Hora de Salida:
VentanaParquimetroImpl.registrarEventos.cmbTarjeta.listener=Cambia la tarjeta a {}.
#
# Mensajes de la clase ModeloParquimetroImpl
#
ModeloParquimetroImpl.recuperarTarjetas.logger=Recupera las tarjetas.
ModeloParquimetroImpl.recuperarUbicaciones.logger=Recupera las ubicaciones.
ModeloParquimetroImpl.recuperarParquimetros.logger=Recupera los parquimetros de un ubicación.
ModeloParquimetroImpl.conectarParquimetro.logger=Se intenta conectar al parquimetro {} con la tarjeta {}.
#
# Mensajes de la clase ControladorParquimetroImpl
#
ControladorParquimetroImpl.constructor.logger=Se crea el controlador del Parquimetro
ControladorParquimetroImpl.salirAplicacion.logger=Saliendo de la aplicación.
ControladorParquimetroImpl.cerrarSesion.logger=Cerrando la sesión.
ControladorParquimetroImpl.cerrarSesion.loggerLogin=Creando la ventana de login.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.logger=Recupera del modelo las ubicaciones.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.loggerPoblarUbicaciones=informar a la ventana las ubicaciones recuperadas.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.loggerRecuperarTarjetas=Recupera del modelo las tarjetas.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.loggerPoblarTarjetas=informar a la ventana las tarjetas recuperadas.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.loggerWarn=Se produjo una excepción {}
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.informar=Hubo un problema para recuperar los datos de ubicaciones y tarjetas.
ControladorParquimetroImpl.cambiarTarjeta.logger=Se informa a la ventana que muestre la información de la tarjeta seleccionada.
ControladorParquimetroImpl.cambiarUbicacion.logger=Se cambió la ubicación y se deben recuperar los parquimetros.
ControladorParquimetroImpl.cambiarUbicacion.logger2=Busca los parquimetros de la ubicación.
ControladorParquimetroImpl.cambiarUbicacion.loggerRecuperarParquimetros=Se recuperaron {} parquimetros.
ControladorParquimetroImpl.cambiarUbicacion.warn=Se produjo una excepción {}
ControladorParquimetroImpl.conectarParquimetro.parquimetroNull=Debe seleccionar un parquimetro.
ControladorParquimetroImpl.conectarParquimetro.tarjetaNull=Debe ingresar una tarjeta.
ControladorParquimetroImpl.conectarParquimetro.logger=Se intenta conectar al parquimetro {}.
ControladorParquimetroImpl.conectarParquimetro.loggerConectarParquimetro=Se conectó al parquimetro y se retornó un estacionamiento.
ControladorParquimetroImpl.conectarParquimetro.loggerMostrarIngresoEstacionamiento=Se solicita a la ventana que muestre la información del INGRESO al estacionamiento.
ControladorParquimetroImpl.conectarParquimetro.loggerMostrarSalidaEstacionamiento=Se solicita a la ventana que muestre la información de la SALIDA del estacionamiento.
ControladorParquimetroImpl.conectarParquimetro.loggerSinSaldoSuficienteException=Muestra el parquimetro al cual se conectó.
ControladorParquimetroImpl.conectarParquimetro.SinSaldoSuficienteException=No dispone de saldo suficiente
ControladorParquimetroImpl.conectarParquimetro.loggerParquimetroNoExisteException=El parquimetro no se encuentra en funcionamiento o no existe
ControladorParquimetroImpl.conectarParquimetro.ParquimetroNoExisteException=El parquimetro no se encuentra en funcionamiento o no existe
ControladorParquimetroImpl.conectarParquimetro.loggerTarjetaNoExisteException=La tarjeta no se encuentra habilitada o no existe
ControladorParquimetroImpl.conectarParquimetro.TarjetaNoExisteException=La tarjeta no se encuentra habilitada o no existe
ControladorParquimetroImpl.conectarParquimetro.loggerException=Se produjo una excepción no controlada: {}
ControladorParquimetroImpl.conectarParquimetro.Exception=Se produjo una excepción no controlada
#
# Mensajes de la clase VentanaLoginImpl
#
VentanaLoginImpl.constructor.logger=Creación de la ventana de login
VentanaLoginImpl.eliminarVentana.logger=Eliminación de la ventana de login.
VentanaLoginImpl.informar.logger=Crea una ventana modal informando: {}.
VentanaLoginImpl.inicializar.title=Ingreso al Sistema de Parquimetros
VentanaLoginImpl.inicializar.registrarListener=Se registran los listeners.
VentanaLoginImpl.crearPanelButtons.btnAceptarLogin=Aceptar
VentanaLoginImpl.crearPanelButtons.btnCancelarLogin=Cancelar
VentanaLoginImpl.crearPanelTipoUsuario.lblRol=Rol:
VentanaLoginImpl.crearPanelLoginInspector.lblUsername=Legajo:
VentanaLoginImpl.crearPanelLoginInspector.lblPasswordLogin=Contraseña:
VentanaLoginImpl.getIngresarListener.ingresarComoInspector=Intenta ingresar como {}
VentanaLoginImpl.getIngresarListener.ingresarComoParquimetro=Intenta ingresar como {}
VentanaLoginImpl.getIngresarListener.error=Intenta ingresar con un valor erroneo de usuario
#
# Mensajes de la clase ControladorLoginImpl
#
ControladorLoginImpl.constructor.iniciarConexion=Se inicia la carga de parámetros para conectar con la BD.
ControladorLoginImpl.constructor.registrarControlador=Se registra el controlador en la ventana.
ControladorLoginImpl.constructor.poblarComboTipoUsuario=Recupera del modelo los usuarios e informa a la ventana que los muestre.
ControladorLoginImpl.ejecutar.logger=Se muestra la ventana de Login.
ControladorLoginImpl.ingresarComoInspector.logger=Intenta ingresar como {} con legajo {}, password {}.
ControladorLoginImpl.ingresarComoInspector.obtenerUsuario=Recupera el usuario {} del archivo de configuración para conectarse a la BD con los permisos de dicho usuario.
ControladorLoginImpl.ingresarComoInspector.autenticar={} con legajo {} autenticado
ControladorLoginImpl.ingresarComoInspector.registrarInspectorLogueado=Informa al controlador del inspector quien se encuentra logueado
ControladorLoginImpl.ingresarComoInspector.ejecutar=Transfiere el control al nuevo controlador
ControladorLoginImpl.ingresarComoInspector.eliminarVentana=Informa a la vista que puede eliminar la ventana de login.
ControladorLoginImpl.ingresarComoInspector.InspectorNoAutenticadoException=Hubo un error en la autenticación.
ControladorLoginImpl.ingresarComoInspector.InspectorNoAutenticadoExceptionInformar=El usuario o contraseña ingresados son incorrectos.
ControladorLoginImpl.ingresarComoInspector.Exception=Hubo un error en la autenticación.
ControladorLoginImpl.ingresarComoInspector.errorConectar=No se pudo conectar a la BD.
ControladorLoginImpl.ingresarComoInspector.errorObtenerUsuarioLogger=No se pudo recuperar la información del {}.
ControladorLoginImpl.ingresarComoInspector.errorObtenerUsuario=Error en el acceso a la información del %s.
ControladorLoginImpl.ingresarComoParquimetro.logger=Intenta ingresar como {}.
ControladorLoginImpl.ingresarComoParquimetro.usuarioNotNull=usuario {}, password {}
ControladorLoginImpl.ingresarComoParquimetro.ejecutar=Transfiere el control al nuevo controlador
ControladorLoginImpl.ingresarComoParquimetro.eliminarVentana=Informa a la vista que puede eliminar la ventana de login.
ControladorLoginImpl.ingresarComoParquimetro.errorObtenerUsuarioLogger=No se pudo recuperar la información del usuario {}.
ControladorLoginImpl.ingresarComoParquimetro.errorObtenerUsuario=Error en el acceso a la información del %s.