#
# Messages from the WindowInspector interface
#
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_PATENTE=patent
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_CALLE=street
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_ALTURA=height
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_FECHA_ENTRADA=entry date
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_HORA_ENTRADA=entry time
VentanaInspector.TABLA_COMPROBAR_ESTACIONAMIENTO_ESTADO=status
VentanaInspector.TABLA_GENERAR_MULTA_PATENTE=patent
VentanaInspector.TABLA_GENERAR_MULTA_CALLE=calle
VentanaInspector.TABLA_GENERAR_MULTA_ALTURA=height
VentanaInspector.TABLA_GENERAR_MULTA_NRO_MULTA=no fine
VentanaInspector.TABLA_GENERAR_MULTA_FECHA_MULTA=fine date
VentanaInspector.TABLA_GENERAR_MULTA_HORA_MULTA=hour fine
VentanaInspector.TABLA_GENERAR_MULTA_LEGAJO=file
#
# Messages from the VentanaInspectorImpl class
#
VentanaInspectorImpl.eliminarVentana.logger=Window removal.
VentanaInspectorImpl.informar.logger=Creates a modal window reporting {}
VentanaInspectorImpl.mostrarInspectorLogueado.logger=The inspector {}, {} is logged with file {}
VentanaInspectorImpl.mostrarInspectorLogueado.lblInspector=File:
VentanaInspectorImpl.mostrarParquimetroConectado.logger=The window shows the information of the connected parking meter.
VentanaInspectorImpl.mostrarParquimetroConectado.lblParquimetroUbicacion1=Connected to parking meter
VentanaInspectorImpl.mostrarParquimetroConectado.lblParquimetroUbicacion2=from the street
VentanaInspectorImpl.poblarParquimetros.logger=Load the parking meter combos with the {} recovered
VentanaInspectorImpl.poblarUbicaciones.logger=Load the city combos with the {} locations retrieved
VentanaInspectorImpl.inicializar.logger=Initialization of the Inspector window
VentanaInspectorImpl.inicializar.frameTitle=Personal unit for Inspector agents
VentanaInspectorImpl.crearMenuOpciones.menuOpciones=Menu
VentanaInspectorImpl.crearMenuOpciones.mntmCerrarSesion=Close Session
VentanaInspectorImpl.crearMenuOpciones.mntmSalir=Exit
VentanaInspectorImpl.crearPanelBotoneraVolverMenuPrincipal.btnVolverMenuOpciones=Return
VentanaInspectorImpl.actualizarListaPatentesEstacionadas.logger=The window is requested to show the information of {} patents.
VentanaInspectorImpl.actualizarListaMultas.logger=The window is requested to show the information of {} fines.
VentanaInspectorImpl.crearPanelSeleccionaUbicacion.logger=The location selection panel is created.
VentanaInspectorImpl.crearPanelSeleccionaUbicacion.lblUbicacion=Location
VentanaInspectorImpl.crearPanelSeleccionaUbicacion.lblParquimetro=Parquimeter
VentanaInspectorImpl.crearPanelSeleccionaUbicacion.btnConectarParquimetro=Connect to the Parking Meter
VentanaInspectorImpl.crearPanelCargaPatentes.lblTitulo=Load of Parked Patents
VentanaInspectorImpl.crearPanelCargaPatentes.lblPatente=Patent:
VentanaInspectorImpl.crearPanelCargaPatentes.btnAgregarPatente=Add Patent
VentanaInspectorImpl.crearPanelCargaPatentes.btnQuitarPatente=Remove Patent
VentanaInspectorImpl.crearPanelCargaPatentes.btnLimpiarLista=Clean List
VentanaInspectorImpl.crearPanelCargaPatentes.btnRegistrarMultas=Register Fines
VentanaInspectorImpl.crearPanelCargaPatentes.lblListaPatentes=Patents Loaded
VentanaInspectorImpl.crearPanelCargaPatentes.lblListaMultas=Fined Patents
VentanaInspectorImpl.poblarTablaPatentesEstacionadas.logger=Loads the status table of each patent in the location provided.
VentanaInspectorImpl.poblarTablaMultaGenerarMultas.logger=Loads the table of fines with each patent provided.
VentanaInspectorImpl.registrarEventos.logger=The listeners are logged.
VentanaInspectorImpl.registrarEventos.cmbUbicacion.listener=Changes the location to {}.
VentanaInspectorImpl.registrarEventos.getBtnConectarParquimetro.listener=Runs the parking meter connection listener.
VentanaInspectorImpl.registrarEventos.getBtnAgregarPatente.listener=Runs the listener to add patent to the list.
VentanaInspectorImpl.registrarEventos.getBtnAgregarPatente.informar=The patent does not have the required format. 3 capital letters and 3 digits are expected.
VentanaInspectorImpl.registrarEventos.getBtnQuitarPatente.listener=Executes the listener to remove patent from the list.
VentanaInspectorImpl.registrarEventos.getBtnQuitarPatente.informar=You must first select the patents to remove.
VentanaInspectorImpl.registrarEventos.getBtnLimpiarLista.listener = Execute the listener to clean list of parked patents
VentanaInspectorImpl.registrarEventos.getBtnRegistrarMultas.listener=Runs the listener to register fines.
VentanaInspectorImpl.registrarEventos.getBtnRegistrarMultas.informar=You must first upload the parked licenses.
#
# Messages from the ControladorInspectorImpl class
#
ControladorInspectorImpl.constructor.logger=The Inspector controller is created
ControladorInspectorImpl.salirAplicacion.logger=Exiting the application.
ControladorInspectorImpl.cerrarSesion.logger=Closing the session.
ControladorInspectorImpl.cerrarSesion.loggerLogin=Creating the login window.
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.logger=Retrieves the locations from the model.
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.loggerPoblarUbicaciones=inform the window of the recovered locations.
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.loggerMostrarPanelPrincipal=Shows the patent loading panel in location.
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.loggerWarn=An exception occurred {}
ControladorInspectorImpl.mostrarCargaPatentesEnUbicacion.informar=There was a problem retrieving the destinations.
ControladorInspectorImpl.registrarInspectorLogueado.logger=The inspector login is recorded with file {}.
ControladorInspectorImpl.cambiarUbicacion.logger=The location has been changed and the parking meters must be recovered.
ControladorInspectorImpl.cambiarUbicacion.logger2=Search the parking meters of the location.
ControladorInspectorImpl.cambiarUbicacion.loggerRecuperarParquimetros={} parking meters were recovered.
ControladorInspectorImpl.cambiarUbicacion.warn=An exception occurred {}
ControladorInspectorImpl.agregarPatente.logger=Tries to add the Patent {} to the list.
ControladorInspectorImpl.agregarPatente.patenteNoExiste=The patent is not registered.
ControladorInspectorImpl.agregarPatente.errorConexion=There was an error in the connection with the database.
ControladorInspectorImpl.agregarPatente.logger.patenteRepetida=Verifies if the patent has already been registered.
ControladorInspectorImpl.agregarPatente.patenteRepetida=The patent is already entered.
ControladorInspectorImpl.mostrarVentanaCargaPatentes.logger=Shows the patent loading panel in location.
ControladorInspectorImpl.conectarParquimetro.logger=Attempting to connect to the parking meter {}.
ControladorInspectorImpl.conectarParquimetro.logger.conectarParquimetro=You have connected to the parking meter and your access has been logged.
ControladorInspectorImpl.conectarParquimetro.logger.actualizaUbicacion=Updates the information of the location to which the parking meter is associated according to the DB data.
ControladorInspectorImpl.conectarParquimetro.logger.muestraParquimetro=Shows the parking meter to which it was connected.
ControladorInspectorImpl.conectarParquimetro.logger.conexionParquimetroException=Could not connect to parking meter.
ControladorInspectorImpl.conectarParquimetro.logger.Exception=An unhandled exception occurred: {}
ControladorInspectorImpl.conectarParquimetro.logger.limpiaListaPatentes=The list of patents in the location is initialized.
ControladorInspectorImpl.registraMultas.exception=An exception occurred while processing the patent {}
ControladorInspectorImpl.registraMultas.logger=Logger to log fines for location {}.
ControladorInspectorImpl.registraMultas.inspectorNoHabilitado=The inspector is not enabled to register fines in said location.
ControladorInspectorImpl.registraMultas.errorConexion=There was an error in the connection with the database.
ControladorInspectorImpl.registraMultas.logger.multas={} fines were issued.
#
# Messages from the ModelInspectorImpl class
#

ModeloInspectorImpl.constructor.logger=Inspector model is created.
ModeloInspectorImpl.autenticar.logger=Tries to authenticate the inspector with file {} and password {}.
ModeloInspectorImpl.autenticar.parametrosVacios=The parameters cannot be empty.
ModeloInspectorImpl.recuperarUbicaciones.logger=Retrieves all locations.
ModeloInspectorImpl.recuperarParquimetros.logger=Retrieves parking meters from location {}.
ModeloInspectorImpl.conectarParquimetro.logger=Attempting to connect to the parking meter {}.
ModeloInspectorImpl.recuperarUbicacion.logger=Retrieves the location of the parking meter with ID {}.
ModeloInspectorImpl.recuperarUbicacion.ubicacionNoEncontrada=The location of the parking meter with ID {} was not found.
ModeloInspectorImpl.verificarPatente.logger=Verifies that the patent {} is found in the Automobiles table.
ModeloInspectorImpl.recuperarEstacionamiento.logger=Check if there is a registered parking lot for the patent {} in {} {}.
ModeloInspectorImpl.generarMultas.logger=Fines will be generated for license plates with unregistered parking. Potentials: {}.
#
# Messages of the DAOAutomovilImpl class
#
DAOAutomovilImpl.recuperarAutomovilPorPatente.AutomovilNoEncontradoException=The car is not registered in the system.
#
# Messages from the DAOInspectorImpl class
#
DAOInspectorImpl.autenticar.inspectorNoAutenticado=Inspector {} was not authenticated with file {}.
DAOInspectorImpl.autenticar.errorConexion=There was an error in the connection.
DAOInspectorImpl.recuperarInspectorPorLegajo.InspectorNoEncontradoException=The inspector is not registered in the system.
#
# Messages of the class VentanaParquimetroImpl
#
VentanaParquimetroImpl.eliminarVentana.logger=Window removal.
VentanaParquimetroImpl.informar.logger=Creates a modal window reporting {}
VentanaParquimetroImpl.poblarTarjetas.logger=Load the combo with the recovered {} cards.
VentanaParquimetroImpl.poblarParquimetros.logger=Load the combo with the {} recovered parking meters.
VentanaParquimetroImpl.poblarUbicaciones.logger=Load the combo with the {} recovered locations.
VentanaParquimetroImpl.mostrarInformacionTarjeta.logger=The information of the card {} is displayed.
VentanaParquimetroImpl.mostrarIngresoEstacionamiento.logger=Information about entering the parking lot is displayed.
VentanaParquimetroImpl.mostrarSalidaEstacionamiento.logger=The information of the parking exit is shown.
VentanaParquimetroImpl.inicializar.logger=Initialization of the parking meter window
VentanaParquimetroImpl.inicializar.frameTitle=Entrance and Exit of Parking
VentanaParquimetroImpl.crearMenuOpciones.menuOpciones=Menu
VentanaParquimetroImpl.crearMenuOpciones.mntmCerrarSesion=Close Session
VentanaParquimetroImpl.crearMenuOpciones.mntmSalir=Exit
VentanaParquimetroImpl.crearPanelConectarParquimetro.logger=The connection panel to the parking meter is created.
VentanaParquimetroImpl.crearPanelSeleccionaUbicacion.lblTarjeta=Card
VentanaParquimetroImpl.crearPanelConectarParquimetro.lblUbicacion=Location
VentanaParquimetroImpl.crearPanelConectarParquimetro.lblParquimetro=Parquimeter
VentanaParquimetroImpl.crearPanelConectarParquimetro.btnConectarParquimetro=Connect to the Parking Meter
VentanaParquimetroImpl.registrarEventos.logger=The listeners are logged.
VentanaParquimetroImpl.registrarEventos.cmbUbicacion.listener=Changes the location to {}.
VentanaParquimetroImpl.registrarEventos.getBtnConectarParquimetro.listener=Runs the parking meter connection listener.
VentanaParquimetroImpl.setTextLblTarjetaInformacion.null=You have not selected a card.
VentanaParquimetroImpl.setTextLblTarjetaInformacion.saldo=Balance:
VentanaParquimetroImpl.setTextLblTarjetaInformacion.tipoTarjeta=Type of Card:
VentanaParquimetroImpl.setTextLblTarjetaInformacion.tipoTarjeta.descuento=Discount:
VentanaParquimetroImpl.setTextLblTarjetaInformacion.automovil.patente=Patent:
VentanaParquimetroImpl.setTextLblTarjetaInformacion.automovil.marca=Brand:
VentanaParquimetroImpl.setTextLblTarjetaInformacion.automovil.modelo=Model:
VentanaParquimetroImpl.setTextLblTarjetaInformacion.automovil.color=Color:
VentanaParquimetroImpl.setTextLblTarjetaInformacion.conductor.apellidoYnombre=Driver:
VentanaParquimetroImpl.setTextLblConexionResultadoEntrada.ingreso=You have entered the parking lot
VentanaParquimetroImpl.setTextLblConexionResultadoEntrada.tiempoDisponible=You have %s minutes
VentanaParquimetroImpl.setTextLblConexionResultadoEntrada.fechaIngreso=Entry Date:
VentanaParquimetroImpl.setTextLblConexionResultadoEntrada.horaIngreso=Entry Time:
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.salida=You have exited the parking lot
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.tiempoTranscurrido=You have been in the parking lot %s minutes
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.saldo=Your card balance is $
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.fechaIngreso=Entry Date:
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.horaIngreso=Entry Time:
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.fechaSalida=Departure Date:
VentanaParquimetroImpl.setTextLblConexionResultadoSalida.horaSalida=Departure Time:
VentanaParquimetroImpl.registrarEventos.cmbTarjeta.listener=Change the card to {}.
#
# Messages from the ModeloParquimetroImpl class
#
ModeloParquimetroImpl.recuperarTarjetas.logger=Retrieves the cards.
ModeloParquimetroImpl.recuperarUbicaciones.logger=Retrieves the locations.
ModeloParquimetroImpl.recuperarParquimetros.logger=Retrieves parking meters from a location.
ModeloParquimetroImpl.conectarParquimetro.logger=Attempting to connect to the parking meter {} with the card {}.
#
# Messages from the ControladorParquimetroImpl class
#
ControladorParquimetroImpl.constructor.logger=Parking meter controller is created
ControladorParquimetroImpl.salirAplicacion.logger = Exiting the application.
ControladorParquimetroImpl.cerrarSesion.logger=Closing the session.
ControladorParquimetroImpl.cerrarSesion.loggerLogin=Creating the login window.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.logger=Retrieves the locations from the model.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.loggerPoblarUbicaciones=inform the window of the recovered locations.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.loggerRecuperarTarjetas=Retrieves the cards from the model.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.loggerPoblarTarjetas=inform the window of the recovered cards.
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.loggerWarn=An exception occurred {}
ControladorParquimetroImpl.mostrarCargaPatentesEnUbicacion.informar=There was a problem retrieving location and card data.
ControladorParquimetroImpl.cambiarTarjeta.logger=The window is informed to show the information of the selected card.
ControladorParquimetroImpl.cambiarUbicacion.logger=The location has been changed and the parking meters must be recovered.
ControladorParquimetroImpl.cambiarUbicacion.logger2=Search the parking meters of the location.
ControladorParquimetroImpl.cambiarUbicacion.loggerRecuperarParquimetros={} parking meters were recovered.
ControladorParquimetroImpl.cambiarUbicacion.warn=An exception occurred {}
ControladorParquimetroImpl.conectarParquimetro.parquimetroNull=You must select a parking meter.
ControladorParquimetroImpl.conectarParquimetro.tarjetaNull=You must enter a card.
ControladorParquimetroImpl.conectarParquimetro.logger=Attempting to connect to the parking meter {}.
ControladorParquimetroImpl.conectarParquimetro.loggerConectarParquimetro=Connected to the parking meter and returned a parking lot.
ControladorParquimetroImpl.conectarParquimetro.loggerMostrarIngresoEstacionamiento=The window is requested to show the information of the ENTRY to the parking lot.
ControladorParquimetroImpl.conectarParquimetro.loggerMostrarSalidaEstacionamiento=The window is requested to show the information of the parking EXIT.
ControladorParquimetroImpl.conectarParquimetro.loggerSinSaldoSuficienteException=Shows the parking meter to which it was connected.
ControladorParquimetroImpl.conectarParquimetro.SinSaldoSuficienteException=You do not have sufficient balance
ControladorParquimetroImpl.conectarParquimetro.loggerParquimetroNoExisteException=The parking meter is not working or does not exist
ControladorParquimetroImpl.conectarParquimetro.ParquimetroNoExisteException=The parking meter is not working or does not exist
ControladorParquimetroImpl.conectarParquimetro.loggerTarjetaNoExisteException=The card is not enabled or does not exist
ControladorParquimetroImpl.conectarParquimetro.TarjetaNoExisteException=The card is not enabled or does not exist
ControladorParquimetroImpl.conectarParquimetro.loggerException=An unhandled exception occurred: {}
ControladorParquimetroImpl.conectarParquimetro.Exception=An unhandled exception occurred
#
# Messages from the VentanaLoginImpl class
#
VentanaLoginImpl.constructor.logger=Creation of the login window
VentanaLoginImpl.eliminarVentana.logger=Elimination of the login window.
VentanaLoginImpl.informar.logger=Creates a modal window reporting: {}.
VentanaLoginImpl.inicializar.title=Login to the Parking Meter System
VentanaLoginImpl.inicializar.registrarListener=The listeners are registered.
VentanaLoginImpl.crearPanelButtons.btnAceptarLogin=Accept
VentanaLoginImpl.crearPanelButtons.btnCancelarLogin=Cancel
VentanaLoginImpl.crearPanelTipoUsuario.lblRol=Role:
VentanaLoginImpl.crearPanelLoginInspector.lblUsername=File:
VentanaLoginImpl.crearPanelLoginInspector.lblPasswordLogin=Password:
VentanaLoginImpl.getIngresarListener.ingresarComoInspector=Try to login as {}
VentanaLoginImpl.getIngresarListener.ingresarComoParquimetro=Try to login as {}
VentanaLoginImpl.getIngresarListener.error = Attempt to log in with a wrong user value
#
# Messages from class ControladorLoginImpl
#
ControladorLoginImpl.constructor.iniciarConexion=The loading of parameters to connect with the database begins.
ControladorLoginImpl.constructor.registrarControlador=The controller is registered in the window.
ControladorLoginImpl.constructor.poblarComboTipoUsuario=Retrieves the users from the model and informs the window to show them.
ControladorLoginImpl.ejecutar.logger=The Login window is displayed.
ControladorLoginImpl.ingresarComoInspector.logger=Try to login as {} with file {}, password {}.
ControladorLoginImpl.ingresarComoInspector.obtenerUsuario=Retrieves the user {} from the configuration file to connect to the DB with the permissions of said user.
ControladorLoginImpl.ingresarComoInspector.autenticar={} with file {} authenticated
ControladorLoginImpl.ingresarComoInspector.registrarInspectorLogueado=Informs the controller of the inspector who is logged in
ControladorLoginImpl.ingresarComoInspector.ejecutar=Transfer control to the new controller
ControladorLoginImpl.ingresarComoInspector.eliminarVentana=Informs the view that it can eliminate the login window.
ControladorLoginImpl.ingresarComoInspector.InspectorNoAutenticadoException=There was an error in the authentication.
ControladorLoginImpl.ingresarComoInspector.InspectorNoAutenticadoExceptionInformar=The username or password entered are incorrect.
ControladorLoginImpl.ingresarComoInspector.Exception=There was an error in the authentication.
ControladorLoginImpl.ingresarComoInspector.errorConectar=Could not connect to the database.
ControladorLoginImpl.ingresarComoInspector.errorObtenerUsuarioLogger=Could not retrieve information from {}.
ControladorLoginImpl.ingresarComoInspector.errorObtenerUsuario=Error in accessing the information of %s.
ControladorLoginImpl.ingresarComoParquimetro.logger=Try to login as {}.
ControladorLoginImpl.ingresarComoParquimetro.usuarioNotNull=username {}, password {}
ControladorLoginImpl.ingresarComoParquimetro.ejecutar=Transfer control to the new controller
ControladorLoginImpl.ingresarComoParquimetro.eliminarVentana=Informs the view that it can eliminate the login window.
ControladorLoginImpl.ingresarComoParquimetro.errorObtenerUsuarioLogger=Could not retrieve user information {}.
ControladorLoginImpl.ingresarComoParquimetro.errorObtenerUsuario=Error in accessing the information of %s.